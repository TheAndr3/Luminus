"use client"; // Marca este componente como um Componente Cliente no Next.js

import { useState, useEffect, useCallback } from "react";
import { useRouter } from 'next/navigation'; // Hook para navega√ß√£o program√°tica no Next.js
import EditingAccount from "./editingAccount"; // Componente para edi√ß√£o dos detalhes da conta do usu√°rio
import { ConfirmDeletation } from "./confirmDeletation"; // Componente para confirma√ß√£o de exclus√£o de conta
import { deleteProfile } from "@/services/profileService"; // Servi√ßo de API para exclus√£o de perfil
import { GetProfile } from "@/services/professorService"; // ‚úÖ Chamada de API real para obter o perfil do professor
import { ErroMessageDialog } from "../classroom/components/erroMessageDialog";

// Define a forma dos dados para o formul√°rio do usu√°rio
interface FormDataType {
  id: number;
  username: string;
  email: string;
}

export default function Account() {

  const [openMessage, setOpenMessage] = useState(false);
  const [messageDialog, setMessageDialog] = useState('');


  // Estado para controlar a visibilidade do di√°logo de confirma√ß√£o de exclus√£o
  const [deleteDialog, setDeleteDialog] = useState(false);
  // Inst√¢ncia do roteador Next.js para navega√ß√£o
  const router = useRouter();
  // Estado para controlar a visibilidade do formul√°rio de edi√ß√£o de conta
  const [editAccount, setEditAccount] = useState(false);
  // Estado para armazenar os dados do perfil do usu√°rio
  const [formData, setFormData] = useState<FormDataType>({
    id: 0,
    username: '',
    email: ''
  });
  // Estado para indicar se os dados est√£o sendo carregados
  const [loading, setLoading] = useState(true);
  // Estado para armazenar quaisquer mensagens de erro durante a busca de dados
  const [error, setError] = useState<string | null>(null);

  // Manipulador para abrir o di√°logo de confirma√ß√£o de exclus√£o
  const handleDeleteProfile = () => {
    setDeleteDialog(true);
  };

  // useCallback memoiza a fun√ß√£o fetchUserData para evitar recria√ß√µes desnecess√°rias,
  // otimizando o desempenho para o array de depend√™ncias do useEffect.
  const fetchUserData = useCallback(async () => {
    setLoading(true); // Inicia o estado de carregamento
    setError(null); // Limpa quaisquer erros anteriores

    try {
      // Recupera o ID do professor do localStorage.
      // Este √© um padr√£o comum, mas considere alternativas mais seguras para produ√ß√£o.
      const professorId = localStorage.getItem("professorId");

      // Lan√ßa um erro se o professorId n√£o for encontrado, indicando um problema potencial
      if (!professorId) {
        setMessageDialog("ID do professor n√£o encontrado no localStorage.")
        setOpenMessage(true)
        throw new Error("ID do professor n√£o encontrado no localStorage.");
      }

      // Chama a API real para obter os dados do perfil do professor
      const data = await GetProfile(parseInt(professorId, 10));

      // Atualiza o estado formData com os dados do usu√°rio obtidos
      setFormData({
        id: parseInt(professorId, 10), // Garante que o ID seja analisado como um n√∫mero inteiro
        username: data.name,
        email: data.email
      });

    } catch (err) {
      // Captura e define quaisquer erros que ocorram durante a opera√ß√£o de busca
      setMessageDialog("Erro ao carregar os dados do perfil.")
      setOpenMessage(true)

      console.error(err); // Registra o erro para fins de depura√ß√£o
    } finally {
      setLoading(false); // Finaliza o estado de carregamento, independentemente do sucesso ou falha
    }
  }, []); // Array de depend√™ncia vazio significa que esta fun√ß√£o √© criada uma √∫nica vez

  // Hook useEffect para buscar dados do usu√°rio quando o componente √© montado
  // e sempre que fetchUserData mudar (o que n√£o acontecer√° devido ao array de depend√™ncia vazio do useCallback)
  useEffect(() => {
    fetchUserData();
  }, [fetchUserData]); // O array de depend√™ncia garante que o efeito seja executado quando fetchUserData muda

  // Manipulador para abrir o formul√°rio de edi√ß√£o de conta
  const editingProfile = () => setEditAccount(true);

  // Fun√ß√£o de callback a ser executada ap√≥s a conta ser atualizada com sucesso.
  // Ela busca novamente os dados do usu√°rio para exibir as informa√ß√µes mais recentes.
  const handleAccountUpdated = () => {
    console.log("Perfil atualizado, recarregando dados...");
    fetchUserData(); // Recarrega os dados para mostrar o perfil atualizado
  };

  // Fun√ß√£o ass√≠ncrona para lidar com a exclus√£o de um perfil de usu√°rio
  const DeleteProfile = async (userId: number) => {
    try {
      const response = await deleteProfile(userId); // Chama a API para excluir o perfil
      console.log("Conta exclu√≠da com sucesso:", response.message);
      router.push("/login"); 
    } catch (error: any) {
      // Captura e registra quaisquer erros durante o processo de exclus√£o
      console.error("Erro ao excluir perfil:", error.message);
      // Potencialmente, voc√™ poderia definir um estado de erro aqui para exibir uma mensagem ao usu√°rio
    }
  };

  // --- Renderiza√ß√£o Condicional para Estados de Carregamento e Erro ---
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 w-full px-4">
        <p>Carregando perfil...</p> {/* Exibe mensagem de carregamento */}
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 w-full px-4">
        <p className="text-red-500">{error}</p> {/* Exibe mensagem de erro */}
      </div>
    );
  }

  // --- Renderiza√ß√£o Principal do Componente ---
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-red-100 w-full overflow-hidden">
      <div className="w-full bg-white rounded-xl shadow-md relative min-h-screen">
        {/* √çcone de Sino de Notifica√ß√£o */}
        <div className="absolute top-4 right-4 z-10">
          <div className="relative">
            <span className="text-2xl text-gray-700">üîî</span>
            <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full px-1.5 py-0.5">1</span>
          </div>
        </div>

        {/* Fundo do Cabe√ßalho do Perfil */}
        <div className="h-28 w-full bg-gradient-to-r from-blue-900 to-indigo-400" />

        {/* Se√ß√£o de Informa√ß√µes do Perfil do Usu√°rio */}
        <div className="flex items-center gap-4 px-6 py-6">
          <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center text-2xl">üë§</div>
          <div>
            <h2 className="text-4xl font-bold">{formData.username}</h2>
            <p className="text-1xl text-gray-600">{formData.email}</p>
            <p className="text-1xl text-gray-400">Sem institui√ß√£o associada</p>
          </div>
        </div>

        {/* Detalhes Adicionais do Perfil (ex: Nome Completo) */}
        <div className="px-6 py-6 space-y-6">
          <div>
            <p className="text-1xl text-gray-500 font-semibold mb-1">Nome Completo</p>
            <p className="text-2xl">{formData.username}</p>
          </div>
        </div>

        {/* Bot√µes de A√ß√£o: Editar e Deletar */}
        <div className="px-6 py-6 flex justify-center gap-5">
          <button
            onClick={editingProfile}
            className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded"
          >
            Editar {/* Bot√£o para abrir o formul√°rio de edi√ß√£o */}
          </button>
          <button
            onClick={handleDeleteProfile} // Este abre o di√°logo de confirma√ß√£o de exclus√£o
            // ALERTA: O texto "Sair" √© enganoso, pois aciona a exclus√£o da conta.
            // Considere alterar para "Deletar Conta" ou "Excluir Conta".
            className="bg-red-500 hover:bg-red-600 text-white text-sm px-4 py-2 rounded flex items-center gap-1"
          >
            Sair {/* Este bot√£o atualmente inicia a exclus√£o da conta */}
          </button>
        </div>
      </div>

      {/* Modal/Di√°logo de Edi√ß√£o de Conta */}
      <EditingAccount
        open={editAccount} // Controla a visibilidade com base no estado
        onCancel={() => setEditAccount(false)} // Callback para fechar o di√°logo
        user={{
          id: formData.id,
          username: formData.username,
          password: '', // A senha √© intencionalmente deixada em branco por seguran√ßa
        }}
        onUpdateSuccess={handleAccountUpdated} // Callback para buscar novamente os dados ap√≥s a atualiza√ß√£o
      />

      {/* Modal/Di√°logo de Confirma√ß√£o de Exclus√£o */}
      <ConfirmDeletation
        open={deleteDialog} // Controla a visibilidade com base no estado
        onCancel={() => setDeleteDialog(false)} // Callback para cancelar a exclus√£o
        onConfirm={() => DeleteProfile(formData.id)} // Callback para confirmar e executar a exclus√£o
      />

      <ErroMessageDialog
        open={openMessage}
        onConfirm={()=> setOpenMessage(false)}
        description={messageDialog}
      />
    </div>

    
  );
}
